service:
  name: workout-deck

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    WORKOUTS_TABLE: Workouts-${self:provider.stage}
    WORKOUT_ID_INDEX: WorkoutIdIndex
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKOUTS_TABLE}
    
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKOUTS_TABLE}/index/${self:provider.environment.WORKOUT_ID_INDEX}

custom:
  serverless-offline:
    httpPort: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateWorkout:
    handler: src/lambda/http/createWorkout.handler
    events:
      - http:
          method: post
          path: workout
          cors: true

  GetWorkouts:
    handler: src/lambda/http/getWorkouts.handler
    events:
      - http:
          method: get
          path: workouts
          cors: true

  GetWorkout:
    handler: src/lambda/http/getWorkout.handler
    events:
      - http:
          method: get
          path: workouts/{workoutId}
          cors: true

resources:
  Resources:
    WorkoutsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: workoutId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: workoutId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.WORKOUT_ID_INDEX}
            KeySchema:
              - AttributeName: workoutId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.WORKOUTS_TABLE}
