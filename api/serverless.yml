org: bowen9284
app: workout-deck
service:
  name: workout-deck

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    WORKOUTS_TABLE: Workouts-${self:provider.stage}
    WORKOUT_ID_INDEX: WorkoutIdIndex
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKOUTS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WORKOUTS_TABLE}/index/${self:provider.environment.WORKOUT_ID_INDEX}
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn
custom:
  serverless-offline:
    httpPort: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateWorkout:
    handler: src/lambda/http/createWorkout.handler
    events:
      - http:
          method: post
          path: workout
          cors: true
          authorizer: Auth

  GetWorkouts:
    handler: src/lambda/http/getWorkouts.handler
    events:
      - http:
          method: get
          path: workouts
          cors: true

  GetWorkout:
    handler: src/lambda/http/getWorkout.handler
    events:
      - http:
          method: get
          path: workouts/{workoutId}
          cors: true

resources:
  Resources:
    WorkoutsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: workoutId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: workoutId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.WORKOUT_ID_INDEX}
            KeySchema:
              - AttributeName: workoutId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.WORKOUTS_TABLE}

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: AWS::AccountId
                      - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey